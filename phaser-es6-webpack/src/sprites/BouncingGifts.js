import Phaser from 'phaser';import Presents from '../sprites/Presents';export default class BouncingGifts extends Phaser.Group {  constructor (game, x, y) {    super(game);    this.x = x;    this.y = y;    game.physics.arcade.gravity.y = 200;    this.game = game;    this.gifts = [];    this.buildFloor()    this.buildGifts();  }  buildGifts () {    let y = 0    for (let i = 0; i < 5; i += 1) {      const gift = new Phaser.Sprite(this.game, 0, y, Presents.names[i].name);      this.game.physics.arcade.enable(gift);      gift.id = i;      gift.anchor.setTo(0.5, 0.5);      gift.angle = Math.random() * 360      gift.body.velocity.y = 200;      gift.scale.setTo(0.3);      gift.body.bounce.set(0.5, 0.5);      gift.body.allowGravity = true;      gift.body.collideWorldBounds = true;      this.add(gift);      this.gifts.push(gift);      y += Math.random() * 50 + 50;    }    this.arrayCheck = []    for (let i = 0; i < this.gifts.length; i += 1) {      this.arrayCheck.push(0)    }  }  update () {    this.game.physics.arcade.collide(this.floor2, this.gifts[0], this.doAnimation, null, this);    this.game.physics.arcade.collide(this.floor1, this.gifts[1], this.doAnimation, null, this);    this.game.physics.arcade.collide(this.floor3, this.gifts[2], this.doAnimation, null, this);    this.game.physics.arcade.collide(this.floor, this.gifts[3], this.doAnimation, null, this);    this.game.physics.arcade.collide(this.floor, this.gifts[4], this.doAnimation, null, this);  }  doAnimation (obj1, obj2) {    if (this.arrayCheck[obj2.id] === 20) {      // setTimeout(() => {      //   obj2.body.enable = false;      //      //   game.add.tween(obj2)      //     .to({      //       angle: 0      //     }, 1000, null, true);      //      //   const yoyo = game.add.tween(obj2)      //     .to({y: obj2.y - 100}, 1000, null, true)      //   yoyo.yoyo(true)      // }, 2500)    }    if (this.arrayCheck[obj2.id] <= 2) {      const factor = Math.pow(2, this.arrayCheck[obj2.id])      // game.add.tween(obj2)      //   .to({      //     x: obj2.x + (Math.random() - 0.5) * 200 / factor,      //   }, 1000 / factor, null, true)      game.add.tween(obj2.scale)        .to({ x: obj2.scale.x + 0.2 / factor,          y: obj2.scale.y + 0.2 / factor,        }, 1000 / factor, null, true)    }    if (this.arrayCheck[obj2.id] === 0) {      game.add.tween(obj2)        .to({          angle: Math.random() > 0.5 ? 360 : -360        }, 2500, Phaser.Easing.Circular.Out, true)      game.add.tween(obj2)        .to({          x: obj2.x - (Math.random() - 0.5) * 300,          angle: Math.random() > 0.5 ? 360 : -360        }, 2500, null, true)    }    this.arrayCheck[obj2.id] += 1;  }  buildFloor () {    this.floor = new Phaser.Sprite(this.game, -this.x, 680, 'chimney');    this.game.physics.arcade.enable(this.floor);    this.floor.body.allowGravity = false;    this.floor.body.immovable = true;    this.floor.body.moves = false;    this.floor.alpha = 0;    this.add(this.floor)    this.floor1 = new Phaser.Sprite(this.game, -this.x, 600, 'chimney');    this.game.physics.arcade.enable(this.floor1);    this.floor1.body.allowGravity = false;    this.floor1.body.immovable = true;    this.floor1.body.moves = false;    this.floor1.alpha = 0;    this.add(this.floor1)    this.floor2 = new Phaser.Sprite(this.game, -this.x, 630, 'chimney');    this.game.physics.arcade.enable(this.floor2);    this.floor2.body.allowGravity = false;    this.floor2.body.immovable = true;    this.floor2.body.moves = false;    this.floor2.alpha = 0;    this.add(this.floor2)    this.floor3 = new Phaser.Sprite(this.game, -this.x, 660, 'chimney');    this.game.physics.arcade.enable(this.floor3);    this.floor3.body.allowGravity = false;    this.floor3.body.immovable = true;    this.floor3.body.moves = false;    this.floor3.alpha = 0;    this.add(this.floor3)  }}