import Phaser from 'phaser'const array = [  { x: 0, y: 0 },  { x: 100, y: 50 },  { x: 20, y: 20 },  { x: -30, y: -50 },  { x: -100, y: -50 },];export default class Gifts extends Phaser.Group {  constructor (game, targetX, targetY, x, y) {    super(game)    this.x = x;    this.y = y;    this.game = game;    this.targetX = targetX;    this.targetY = targetY;    this.isMoving = false;    this.buildGifts();  }  buildGifts () {    this.container = new Phaser.Group(this.game, 0, 0);    this.add(this.container);    for (let i = 0; i < array.length; i += 1) {      const sprite = new Phaser.Sprite(this.game, array[i].x, array[i].y, 'mushroom')      sprite.inputEnabled = true;      this.container.add(sprite);      sprite.events.onInputDown.add(() => {        if (!this.isMoving) {          this.isMoving = true;          this.moveToTarget();          console.log("move")        }      });    }  }  moveToTarget () {    for (let i = 0; i < this.container.children.length; i += 1) {      const deltaX = this.container.children[i].x + this.x > this.targetX ? -20 : 20;      const deltaY = this.container.children[i].y + this.y > this.targetY ? -20 : 20;      const angle = (Math.random() - 0.5) * 50 + this.container.children[i].angle;      var move = this.game.add.tween(this.container.children[i])        .to({x: this.container.children[i].x + deltaX, y: this.container.children[i].y + deltaY, angle}, 500)      move.onComplete.add(() => {        this.isMoving = false;      })      move.start();    }  }}